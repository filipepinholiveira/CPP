

INTRODUTION TO TEMPLATES

Templates in C++ are a powerful feature that allows the creation of generic and reusable code components. They enable functions and classes to operate with any data type without being rewritten for each specific type.

Key Concepts
Generic Programming: Writing code that works with any data type.
Type Parameters: Specifying types as parameters to functions or classes.
Code Reusability: Reducing redundancy by creating flexible code.

******************************************************************************************************************************************************************

FUNCTION TEMPLATES

Function templates allow functions to operate with generic types. This is particularly useful for algorithms that can be applied to different data types.

(Templates de função permitem que funções trabalhem com tipos genéricos. Isso é especialmente útil para algoritmos que podem ser aplicados 
a diferentes tipos de dados, sem a necessidade de escrever uma função específica para cada tipo de dado.)

SYNTAX

template <typename T>
T max(T a, T b) 
{
    return (a > b) ? a : b;
}

--> Aqui, template <typename T> define um template de função. O tipo genérico T pode ser substituído por qualquer tipo de dado 
(como int, double, std::string, etc.). A função max() compara dois valores do tipo T e retorna o maior deles.

EXAMPLE:

int main() 
{
    int i = max(3, 7); // Works with int
    double d = max(3.0, 7.0); // Works with double
    std::string s = max(std::string("apple"), std::string("banana")); // Works with string
}

Neste exemplo:

int i = max(3, 7);: O template é instanciado para o tipo int.
double d = max(3.0, 7.0);: O template é instanciado para o tipo double.
std::string s = max(std::string("apple"), std::string("banana"));: O template é instanciado para o tipo std::string.
Dessa forma, a mesma função max() pode ser usada para diferentes tipos de dados, o que evita a duplicação de código.







******************************************************************************************************************************************************************

CLASS TEMPLATES

Class templates enable the creation of classes that work with generic types. They are especially useful for data structures and container classes.

(Templates de classe permitem a criação de classes que trabalham com tipos genéricos. Eles são especialmente úteis para estruturas de dados 
e classes de contêiner, onde o tipo de dados armazenado pode variar.)


SYNTAX

template <typename T>
class Box 
{
    private:
        T value;
    public:
        Box(T v) : value(v) {}
        T getValue() { return value; }
};

--> Aqui, template <typename T> define um template de classe. A classe Box utiliza o tipo genérico T, que pode ser substituído 
por qualquer tipo de dado (como int, std::string, etc.). Isso significa que o mesmo código pode ser reutilizado para diferentes tipos de dados.

O atributo value é do tipo T.
O construtor Box(T v) inicializa o value com o valor passado.
O método getValue() retorna o valor armazenado.



EXAMPLE:


int main() 
{
    Box<int> intBox(123); // Box of int
    Box<std::string> strBox("Hello"); // Box of string

    std::cout << intBox.getValue() << std::endl; // Outputs 123
    std::cout << strBox.getValue() << std::endl; // Outputs Hello
}


Neste exemplo:

Box<int> intBox(123);: O template é instanciado para o tipo int, criando uma caixa que armazena um valor inteiro.
Box<std::string> strBox("Hello");: O template é instanciado para o tipo std::string, criando uma caixa que armazena uma string.

Cada instância da classe Box funciona com um tipo de dado específico, permitindo o uso da mesma estrutura de classe para diferentes tipos. 
Isso é útil quando você deseja criar classes que são flexíveis e reutilizáveis, sem precisar duplicar código para cada tipo de dado 
que a classe possa manipular.





******************************************************************************************************************************************************************

TEMPLATE SPECIALIZATION

Template specialization allows for the creation of custom implementations for specific types. This is useful 
when the generic implementation does not suffice for certain types. 

(A especialização de templates permite criar implementações personalizadas para tipos específicos. 
Isso é útil quando a implementação genérica não atende adequadamente a certos tipos de dados e, por isso, 
é necessário fornecer um comportamento específico para esses tipos.)


SYNTAX

template <typename T>
class Container 
{
        T element;
    public:
        Container(T elem) : element(elem) {}
        T getElement() { return element; }
};

--> Aqui, o template de classe Container é genérico e pode trabalhar com qualquer tipo T. 
Ele armazena um elemento do tipo T e o retorna com o método getElement().

Agora, vamos ver a especialização para o tipo int:

// Especialização para int
template <>
class Container<int> 
{
        int element;
    public:
        Container(int elem) : element(elem) 
        {}
        int getElement() 
        { 
            return element * 2; 
        } // Comportamento personalizado para int
};
Essa é uma especialização completa para o tipo int. Quando o tipo int é usado para instanciar 
a classe Container, essa versão especializada será utilizada em vez da versão genérica. 
Nesse caso, o método getElement() retorna o valor do elemento multiplicado por 2, um comportamento personalizado específico para int.


EXAMPLE:

int main() {
    Container<int> intContainer(10);           // Usará a especialização para int
    Container<double> doubleContainer(10.5);   // Usará a implementação genérica para double

    std::cout << intContainer.getElement() << std::endl;   // Exibe 20 (comportamento especializado)
    std::cout << doubleContainer.getElement() << std::endl; // Exibe 10.5 (comportamento genérico)
}


--> Neste exemplo:

Container<int> intContainer(10);: Usa a especialização para int, onde getElement() retorna 10 * 2, resultando em 20.
Container<double> doubleContainer(10.5);: Usa a implementação genérica, onde getElement() simplesmente retorna 10.5.
A especialização de templates é útil quando precisamos de comportamentos diferentes para tipos específicos, sem alterar a implementação genérica para os outros tipos.




******************************************************************************************************************************************************************


TEMPLATE METAPROGRAMMING

Template metaprogramming is a technique in which templates are used to perform computations at compile time. 
This is an advanced topic that can optimize performance by shifting computations from runtime to compile time. Example: Factorial Computation

(A metaprogramação com templates é uma técnica avançada em C++ onde templates são usados para realizar cálculos em tempo de compilação, 
em vez de tempo de execução. Isso pode otimizar o desempenho do programa ao mover cálculos que normalmente seriam feitos em tempo de execução 
para o tempo de compilação, resultando em código mais eficiente.)



template <int N>
struct Factorial 
{
    static const int value = N * Factorial<N - 1>::value;
};

--> 1. Este template define uma estrutura Factorial que calcula o fatorial de N.
A expressão N * Factorial<N - 1>::value é recursiva, o que significa que a estrutura continua a se instanciar 
para valores menores de N até que N seja igual a 0.



template <>
struct Factorial<0> 
{
    static const int value = 1;
};

--> 2. Esta especialização do template define o caso base da recursão. Quando N é 0, o fatorial de 0 é 1, encerrando a recursão.


int main() 
{
    std::cout << "Factorial of 5 is " << Factorial<5>::value << std::endl; // Outputs 120
}

--> 3. Cálculo em Tempo de Compilação:

Quando você escreve Factorial<5>::value, o compilador calcula o valor de Factorial<5> durante a compilação, usando a recursão definida no template.
Neste caso, o compilador calcula 5 * 4 * 3 * 2 * 1 = 120, e o valor 120 é incorporado diretamente no código compilado.
Quando o programa é executado, ele imprime 120, que foi calculado em tempo de compilação.


Benefícios da Metaprogramação com Templates:

Otimização de Desempenho: 
1. Como os cálculos são feitos em tempo de compilação, o código gerado já contém os valores pré-calculados, 
eliminando a necessidade de cálculos em tempo de execução.

2. Segurança em Tempo de Compilação: Erros em cálculos são detectados durante a compilação, reduzindo o risco de bugs em tempo de execução.

3. Recursão em Tempo de Compilação: Templates permitem que funções recursivas sejam "desenroladas" pelo compilador, resultando em código eficiente.


Considerações

A metaprogramação com templates é uma técnica poderosa, mas pode tornar o código mais complexo e difícil de entender. 
É mais comum em contextos onde a otimização de desempenho é crítica, como bibliotecas de alta performance e sistemas embarcados.






